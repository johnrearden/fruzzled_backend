name: Deploy to Linode Server

on:
  release:
    types: [published] # Trigger on new release
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:

  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to linode server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.FRUZZLED_SERVER_IP_ADDRESS }}
        username: ${{ secrets.FRUZZLED_SERVER_USERNAME }}
        key: ${{ secrets.FRUZZLED_SERVER_PRIVATE_SSH_KEY }}
        port: ${{ secrets.FRUZZLED_SERVER_PORT }}
        script: |
          set -e

          # Use different directories for different environments
          DEPLOY_BASE="/home/john/fruzzled_backend_releases"
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          NEW_RELEASE_DIR="$DEPLOY_BASE/release-$TIMESTAMP"
          CURRENT_DIR="$DEPLOY_BASE/current"

          echo "Deploying to ${{ github.ref }} environment"
          echo "New Release directory: $NEW_RELEASE_DIR"

          # Clone the repository into the new release directory
          git clone https://github.com/johnrearden/fruzzled_backend.git "$NEW_RELEASE_DIR"
          cd $NEW_RELEASE_DIR

          # Activate the virtual environment
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

          # Create a symlink to the canonical env.py file and the frontend .env file
          ln -sf /home/john/fruzzled_backend/env.py env.py
          ln -sf /home/john/fruzzled_backend/frontend/.env frontend/.env

          # Check if models or migrations changed
          # Let's leave this as a manual step for now
          # python manage.py migrate

          # Build frontend
          echo "‚öõÔ∏è  Building React frontend..."
          cd frontend

          # Install npm packages
          npm install
          
          # Build the React app
          npm run build
          
          if [ ! -d "dist" ]; then
            echo "‚ùå Frontend build failed - dist directory not found"
            exit 1
          fi

          echo "‚úÖ Frontend build completed"

          # Collect Django static files (admin, DRF browsable API, etc.)
          echo "üìÅ Collecting Django static files..."
          cd ..
          python manage.py collectstatic --noinput
          
          # Deploy built frontend
          
          echo "üìÅ Deploying frontend files..."
          rm -rf staticfiles/dist
          cp -r frontend/dist staticfiles/

          # Run Django system checks
          echo "üîç Running Django system checks..."
          python manage.py check --deploy

          # Switch symlink to the new release
          ln -sfn "$NEW_RELEASE_DIR" "$CURRENT_DIR"

          # Restart gunicorn
          echo "üîÑ Restarting gunicorn..."
          sudo systemctl restart gunicorn
          
          # Wait and verify the service is running
          sleep 5
          if systemctl is-active --quiet gunicorn; then
            echo "‚úÖ Gunicorn restarted successfully"
          else
            echo "‚ùå Gunicorn failed to start, attempting rollback..."
            exit 1
          fi

          echo "üéâ Deployment completed successfully!"
          echo "üìù Deployed commit: $(git rev-parse --short HEAD)"

    - name: Notify on success
      if: success()
      run: echo "üöÄ Deployment to production completed successfully!"
      
    - name: Notify on failure  
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the server logs and consider manual rollback if needed."