import { Keyboard } from './Keyboard';
import { Controls } from './Controls.jsx';
import { ClueList } from '../components/ClueList';
import { Cell } from './Cell';
import { CompletenessDisplay } from './CompletenessDisplay';
import { replaceCharAt } from '../utils/utils';
import { GRID_CONTENTS_LS_KEY, OPEN_CELL, CLOSED_CELL, PUZZLE_ID_LS_KEY } from '../constants/constants.js';
import styles from '../styles/crossword/Grid.module.css';
import btnStyles from '../styles/Button.module.css'
import { useEffect, useState, useCallback, useRef, createRef } from 'react';
import { Row, Col } from 'react-bootstrap';
import { CellInput } from './CellInput.jsx';

const MAX_DIMENSION = 32;

export const CrosswordGrid = ({ data }) => {

    // An array to hold references to the underlying html inputs, to allow
    // the next/previous input to be focused on input value change.
    let cellRefs = [];

    const [currentCell, setCurrentCell] = useState(data.clues[0].start_col + data.clues[0].start_row * data.puzzle.grid.width);
    useEffect(() => {
        if (cellRefs[currentCell].current) {
            cellRefs[currentCell].current.focus();
            cellRefs[currentCell].current.select();
        }
    }, [currentCell])
    const [currentClue, setCurrentClue] = useState(0);
    const [showCellCorrectness, setShowCellCorrectness] = useState(false);
    const [indicatorLetter, setIndicatorLetter] = useState('');
    const [onMobile, setOnMobile] = useState(false);


    

    // This flag is toggled each time a key is pressed, otherwise repeated presses of the 
    // same key would not result in an rerender of the Keyboard as the indicator letter 
    // would remain unchanged
    const [keyboardTripswitch, setKeyboardTripswitch] = useState(false);

    /**
     * The current state of the crossword grid. Checks localStorage for existing content
     * on page load. The setState initialization is embedded in a useEffect hook to prevent
     * the server trying to access the window object during SSR.
     */
    const [gridContents, setGridContents] = useState(data.puzzle.grid.cells);

    useEffect(() => {
        const storedGridContents = window.localStorage.getItem(GRID_CONTENTS_LS_KEY);
        const storedPuzzleId = window.localStorage.getItem(PUZZLE_ID_LS_KEY);
        if (storedPuzzleId == data.puzzle.id) {
            setGridContents(storedGridContents);
        }
    }, [data.puzzle.grid.cells, data.puzzle.id]);

    const [lastChar, setLastChar] = useState("");

    /**
     * An array, with an element for each clue, which stores a list of the cells
     * occupied by that clue on the grid. 
     * 
     * Allows a clue to know which cells it
     * contains.
     */
    const [cellReferences, setCellReferences] = useState(() => {
        let array = new Array(data.clues.length);
        let width = data.puzzle.grid.width;
        for (let i = 0; i < array.length; i++) {
            array[i] = new Array();
            const clue = data.clues[i];
            for (let j = 0; j < clue.solution.length; j++) {
                let cellIndex;
                if (clue.orientation === 'AC') {
                    cellIndex = clue.start_col + j + (clue.start_row * width);
                } else {
                    cellIndex = clue.start_col + ((j + clue.start_row) * width);
                }
                array[i].push(cellIndex);
            }

        }
        return array;
    });

    /**
     * An array, with an element for each cell, which stores a list of the 
     * clues that appear in that cell. 
     * 
     * Allows a cell to know which clue(s) it affects.
     */
    const [clueReferences, setClueReferences] = useState(() => {
        const width = data.puzzle.grid.width;
        const height = data.puzzle.grid.height;
        const length = width * height;
        let array = new Array(length);
        for (let i = 0; i < array.length; i++) {
            array[i] = new Array();
        }
        data.clues.forEach((clue, number) => {
            for (let i = 0; i < clue.solution.length; i++) {
                const startCol = parseInt(clue.start_col);
                const startRow = parseInt(clue.start_row);
                let index = 0;
                if (clue.orientation === 'AC') {
                    index = startCol + i + (startRow * width);
                    // Ensure AC clues are always first in intersection cells for consistent clicking
                    array[index].unshift(number);
                } else {
                    index = startCol + ((i + startRow) * width);
                    array[index].push(number);
                }

            }
        });
        return array;
    });

    /**
     * Handles events generated by user clicking on individual cells.
     * @param {Integer} cellIndex 
     */
    const onCellClick = (cellIndex) => {
        setCurrentCell(cellIndex);
        let result = clueReferences[cellIndex].indexOf(currentClue)
        if (result !== -1) {
            // Alternate the clues selected if 2 are present
            result += 1;
            const orthogonalClueIndex = result >= clueReferences[cellIndex].length ? 0 : result;
            setCurrentClue(clueReferences[cellIndex][orthogonalClueIndex]);
        } else {
            const clue = data.clues[clueReferences[cellIndex][0]];
            if (clue.orientation === "AC" && clueReferences[cellIndex].length > 1) {

                // Check if the AC clue (if both are present) is filled. There's no point 
                // in defaulting to selecting the AC clue if it is - bad UX.
                let clueAlreadyFilled = true;
                for (let x = clue.start_col; x < clue.start_col + clue.solution.length; x++) {
                    const index = x + clue.start_row * data.puzzle.grid.width;
                    if (gridContents[index] === '#') {
                        clueAlreadyFilled = false
                    }
                }
                if (clueAlreadyFilled) {
                    setCurrentClue(clueReferences[cellIndex][1]);
                } else {
                    setCurrentClue(clueReferences[cellIndex][0]);
                }
            } else {
                setCurrentClue(clueReferences[cellIndex][0]);
            }
        };
    }

    const getNextCell = (position) => {
        const index = cellReferences[currentClue].indexOf(position);
        if (index < cellReferences[currentClue].length - 1) {
            return cellReferences[currentClue][index + 1];
        } else {
            return position;
        }
    }

    const getPreviousCell = (position) => {
        const index = cellReferences[currentClue].indexOf(position);
        if (index > 0) {
            return cellReferences[currentClue][index - 1];
        } else {
            return position;
        }
    }

    /**
     * Handles 2 possible key events - a key between 'a' and 'z', and backspace
     * 
     * @param {int} index - the index of the cell the event occurred on 
     * @param {*} event 
     */
    const onCellKeyup = (index, event) => {
        setLastChar(event.code);
        const keyIsChar = event.keyCode >= 65 && event.keyCode <= 90;
        if (keyIsChar) {
            const char = event.key?.toUpperCase();
            let gridCopy = gridContents.slice();
            gridCopy = replaceCharAt(gridCopy, index, char);
            setGridContents(gridCopy);
            setCurrentCell(getNextCell(index));
        } else if (event.key === "Backspace" || event.key === "Delete") {
            let gridCopy = gridContents.slice();
            gridCopy = replaceCharAt(gridCopy, index, OPEN_CELL);
            setGridContents(gridCopy);
            setCurrentCell(getPreviousCell(index));
        }
    }

    /**
     * Handles clicks on clues in child component ClueList.
     * 
     * @param {Integer} clueNumber 
     */
    const onClueClick = (clueIndex) => {
        const clue = data.clues[clueIndex];
        const startCol = clue.start_col;
        const startRow = clue.start_row;
        const cellIndex = startCol + startRow * data.puzzle.grid.width;
        setCurrentCell(cellIndex);
        setCurrentClue(clueIndex);
        cellRefs[cellIndex].current.select();
        window.scrollTo(0, 0);
    }

    /**
     * Toggles the red and green styling to indicate if a letter(cell) is
     * correct or not
     */
    const onDoneClick = () => {
        setShowCellCorrectness((prev) => !prev);
    }

    // Rendering process begins here
    const grid = data.puzzle.grid;
    const cellsWidthRatio = 100 / (grid.width + 4);
    const myStyle = {
        display: 'grid',
        gridTemplateRows: `repeat(${grid.height}, clamp(10px, ${cellsWidthRatio}vw, ${MAX_DIMENSION}px))`,
        gridTemplateColumns: `repeat(${grid.width}, clamp(10px, ${cellsWidthRatio}vw, ${MAX_DIMENSION}px))`,
    }
    let closedCellCount = 0;
    let filledCellCount = 0;

    cellRefs = [];
    const cells = [...gridContents].map((char, pointer) => {
        const highlighted = clueReferences[pointer].includes(currentClue);
        const selected = pointer === currentCell;

        // If the showCellCorrectness flag is true, check if the letter in this
        // cell is correct. If flag is false, the unused value can be false.
        let correct = false;
        if (showCellCorrectness && char != '-') {
            const clueIndex = clueReferences[pointer][0];
            const clue = data.clues[clueIndex];
            const clueStartIndex = clue.start_col + clue.start_row * data.puzzle.grid.width;
            let letterIndex;
            if (clue.orientation === 'AC') {
                letterIndex = pointer - clueStartIndex;
            } else {
                letterIndex = (pointer - clueStartIndex) / data.puzzle.grid.width;
            }
            const correctChar = clue.solution[letterIndex];
            correct = char.toLowerCase() == correctChar.toLowerCase();
        }

        let letter;
        if (char === CLOSED_CELL) {
            closedCellCount += 1;
        }
        if (char === CLOSED_CELL || char === OPEN_CELL) {
            letter = '';
        } else {
            letter = char;
            filledCellCount += 1;
        }

        // Create an empty list named cells, and then fill it with Cell components
        // based on the gridContents string. The key prop is required by React.
        const ref = createRef();
        cellRefs.push(ref);
        return (
            <CellInput
                key={`cell-${pointer}`}
                ref={ref}
                inUse={char !== CLOSED_CELL}
                index={pointer}
                letter={letter}
                clickHandler={onCellClick}
                keyUpHandler={onCellKeyup}
                cellsWidthRatio={cellsWidthRatio}
                maxDimension={MAX_DIMENSION}
                selected={selected}
                highlighted={highlighted}
                showCorrectness={showCellCorrectness}
                correct={correct}
                semantic={true}
            ></CellInput>
        )
    });

    const openCellCount = gridContents.length - closedCellCount;
    const calculatedPercentComplete = Math.floor(filledCellCount / openCellCount * 100);

    if (typeof (window) !== "undefined" && typeof (window) !== null) {
        const mobile = window.matchMedia("(any-pointer:coarse)").matches;
        if (onMobile !== mobile) {
            setOnMobile(mobile);
        }
    }
    const showKeyboard = onMobile;

    return (
        <div className={styles.container}>
            Last Char: {lastChar}
            <Controls puzzleId={data.puzzle.id} showTimer={true}></Controls>
            <h5 className="text-center">Crossword {data.puzzle.id}</h5>
            <Row className="mt-2">
                <Col xs={12} md={8} className='d-flex justify-content-center'>
                    <div
                        id="gridDiv"
                        style={myStyle}
                        className={styles.grid_background}
                    >
                        {cells}
                    </div>

                </Col>
                <Col xs={12} md={4}
                    className="d-flex flex-column justify-content-center align-items-center"
                >
                    <textarea
                        rows="4"
                        readOnly
                        className={styles.current_clue_display}
                        value={currentClue != null ? data.clues[currentClue].clue : ''}>
                    </textarea>
                    <hr></hr>
                    <CompletenessDisplay
                        completenessPercentage={calculatedPercentComplete}
                        shorthand={false}
                    />
                    <button
                        className={`${btnStyles.Button} mt-2`}
                        onClick={onDoneClick}>
                        Check
                    </button>

                </Col>
            </Row>

            <Row className='mt-4'>
                <ClueList
                    clues={data.clues}
                    onClueClick={onClueClick}
                ></ClueList>
            </Row>
        </div>
    );
}