name: Deploy to Linode Server

on:
  push:
    branches: [main]
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to linode server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.FRUZZLED_SERVER_IP_ADDRESS }}
        username: ${{ secrets.FRUZZLED_SERVER_USERNAME }}
        key: ${{ secrets.FRUZZLED_SERVER_PRIVATE_SSH_KEY }}
        port: ${{ secrets.FRUZZLED_SERVER_PORT }}
        script: |
          set -e

          # Use different directories for different environments
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            PROJECT_DIR="/home/john/fruzzled_backend"
            SERVICE_NAME="gunicorn"
          else
            PROJECT_DIR="staging"
            SERVICE_NAME="gunicorn-staging"
          fi

          echo "Deploying to ${{ github.ref }} environment"
          echo "Project directory: $PROJECT_DIR"

          cd $PROJECT_DIR

          # Activate the virtual environment
          source /home/john/fruzzled_backend/venv/bin/activate

          # Check if git working directory is clean
          if [ -n "$(git status --porcelain)" ]; then
            echo "‚ö†Ô∏è  Warning: Working directory has uncommitted changes"
            git stash push -m "Auto-stash before deployment $(date)"
            echo "üíæ Changes stashed"
          fi

          # Create backup of current frontend build
          BACKUP_DIR="/home/john/deployments/backup-$(date +%Y%m%d_%H%M%S)"
          mkdir -p /home/john/deployments
          if [ -d "staticfiles/dist" ]; then
            cp -r staticfiles/dist $BACKUP_DIR
            echo "üì¶ Backup created at $BACKUP_DIR"
          fi

          # Fetch the latest changes from the remote repository
          echo "Fetching latest changes from remote repository"
          COMMIT_BEFORE=$(git rev-parse HEAD)
          git pull origin ${{ github.ref_name }}
          COMMIT_AFTER=$(git rev-parse HEAD)

          if [ "$COMMIT_BEFORE" == "$COMMIT_AFTER" ]; then
            echo "‚ÑπÔ∏è  No new commits, but continuing deployment..."
          else
            echo "‚úÖ Updated from $COMMIT_BEFORE to $COMMIT_AFTER"
          fi

          # Check if Python requirements changed
          if git diff --name-only $COMMIT_BEFORE $COMMIT_AFTER | grep -q requirements.txt; then
            echo "üìã Requirements changed, updating Python packages..."
            pip install -r requirements.txt
          else
            echo "üìã No requirement changes detected"
          fi

          # Check if models or migrations changed
          if git diff --name-only $COMMIT_BEFORE $COMMIT_AFTER | grep -qE "(models\.py|migrations/)"; then
            echo "üóÑÔ∏è  Database changes detected, running migrations..."
            python manage.py migrate
          else
            echo "üóÑÔ∏è  No database changes detected"
          fi

          # Build frontend
          echo "‚öõÔ∏è  Building React frontend..."
          cd frontend
          
          # Check if package.json changed
          if git diff --name-only $COMMIT_BEFORE $COMMIT_AFTER | grep -q frontend/package.json; then
            echo "üì¶ Package.json changed, running npm install..."
            npm install
          else
            echo "üì¶ Using existing node_modules..."
            # Still run npm ci for consistency in production
            npm ci
          fi
          
          # Build the React app
          npm run build
          
          if [ ! -d "dist" ]; then
            echo "‚ùå Frontend build failed - dist directory not found"
            exit 1
          fi

          echo "‚úÖ Frontend build completed"

          # Collect Django static files (admin, DRF browsable API, etc.)
          echo "üìÅ Collecting Django static files..."
          python manage.py collectstatic --noinput
          
          # Deploy built frontend
          cd ..
          echo "üìÅ Deploying frontend files..."
          rm -rf staticfiles/dist
          cp -r frontend/dist staticfiles/

          # Run Django system checks
          echo "üîç Running Django system checks..."
          python manage.py check --deploy

          # Restart gunicorn
          echo "üîÑ Restarting gunicorn..."
          sudo systemctl restart gunicorn
          
          # Wait and verify the service is running
          sleep 5
          if systemctl is-active --quiet gunicorn; then
            echo "‚úÖ Gunicorn restarted successfully"
          else
            echo "‚ùå Gunicorn failed to start, attempting rollback..."

            # Restore backup if it exists
            if [ -d "$BACKUP_DIR" ]; then
              rm -rf staticfiles/dist
              cp -r $BACKUP_DIR staticfiles/dist
              sudo systemctl restart gunicorn
              echo "üîÑ Backup restored and gunicorn restarted"
            fi
            
            exit 1
          fi

          echo "üéâ Deployment completed successfully!"
          echo "üìù Deployed commit: $(git rev-parse --short HEAD)"

    - name: Notify on success
      if: success()
      run: echo "üöÄ Deployment to production completed successfully!"
      
    - name: Notify on failure  
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the server logs and consider manual rollback if needed."